# Median R0 after before closure
period_interest <- c(start_date+1,start_date+11)#as.Date(c("2020-01-01","2020-01-23"))
index_pick <- match(period_interest,date_range)
R0_all <- R0_plot[index_pick[1]:index_pick[2],]
med_R03 <- apply(R0_all,1,function(x){quantile(x,c(0.5))})
# Median R0 range before closure
period_interest <- c(start_date + 5,start_date + 5)#as.Date(c("2020-01-16","2020-01-16"))
index_pick <- match(period_interest,date_range)
R0_all <- R0_plot[index_pick[1]:index_pick[2],]
med_R02 <- apply(R0_all,1,function(x){quantile(x,c(0.5))})
med_R02 <- R0_all; dim(med_R02) <- NULL
# Median R0 after before closure
period_interest <- as.Date(c("2020-01-31","2020-01-31"))
index_pick <- match(period_interest,date_range)
R0_all <- R0_plot[index_pick[1]:index_pick[2],]
#med_R0 <- apply(R0_all,1,function(x){quantile(x,c(0.5))})
med_R0 <- R0_all; dim(med_R0) <- NULL
out_r <- cbind(c.text(med_R02),c.text(med_R0),c.text(med_R03))
out_r <- as_tibble(out_r); names(out_r) <- c("before","after")
write_csv(out_r,"outputs/before_after_R.csv")
}
# Plot profile likelihoods ------------------------------------------------
profile_plot <- function(p1_name = "local_rep_prop",
p2_name = "confirmed_prop",
p3_name = "betavol",
filename=1){
# filename=1
s_out <- read_csv(paste0("outputs/param_search_",filename,".csv"))
s_out <- s_out %>% mutate(param_s = NA)
#s_out[max(s_out$lik)==s_out$lik,] # maximum likelihood
# Define parameter names
# - - -
# Calculate profiles
for(kk in 1:3){ # iterate over parameters
# Define parameter of interest
if(kk==1){s_out$param_s <- s_out$param1}
if(kk==2){s_out$param_s <- s_out$param2}
if(kk==3){s_out$param_s <- s_out$param3}
# Iterate over values and extract profile:
unique_val <- unique(s_out$param_s)
max_prof <- NULL
for(ii in 1:length(unique_val)){
max_lik_ii <-  s_out %>% filter(param_s == unique_val[ii]) %>% select(lik) %>% max()
max_prof <- rbind(max_prof,c(unique_val[ii],max_lik_ii))
}
max_prof <- as_tibble(max_prof); names(max_prof) <- c("param","lik")
# Plot profile for kk:
par(mfrow=c(1,1),mar=c(3,3,1,1),mgp=c(2,0.7,0))
plot(max_prof$param,max_prof$lik,ylim=c(max(max_prof$lik)-4,max(max_prof$lik))+1,xlab="value",ylab="log likelihood",pch=19)
# Add spline function
max_prof2 <- max_prof[max_prof$lik>(max(max_prof$lik)-3),] # select near MLE
model.likelihood <- gam(lik ~ s(param,k=3) , data = max_prof2)
if(kk<3){x.param <- seq(min(max_prof$param),max(max_prof$param),0.0001)}
if(kk==3){x.param <- seq(min(max_prof$param),1.2*max(max_prof$param),0.0001)}
y.predict <- predict(model.likelihood, list(param=x.param), type = "link", se.fit = TRUE)
y.pred.out <- y.predict$fit
lines(c(0,1e2),c(1,1)*(max(y.pred.out)-1.92),lty=2)
lines(x.param,y.pred.out)
mle_val <-x.param[y.pred.out==max(y.pred.out)]
calc_95 <- x.param[y.pred.out>max(y.pred.out)-1.92]; calc_95 <- signif(c(mle_val,min(calc_95),max(calc_95)),3)
text(x=min(max_prof2$param),y=max(max_prof2$lik)+0.5, labels = paste0(calc_95[1]," (95% CI: ",calc_95[2],"-",calc_95[3],")"),adj=0)
#dev.copy(png,paste("plots/param_rel_",kk,".png",sep=""),units="cm",width=10,height=10,res=150)
dev.copy(pdf,paste("plots/param_rel_",kk,".pdf",sep=""),width=5,height=3)
dev.off()
} # end param loop
}
# Plot distributions ------------------------------------------------------
plot_distn <- function(){
xx <- seq(0,20,0.1)
yy_recover <- dgamma(xx,shape=2,rate=2/(1/theta[["recover"]]))
yy_incubation <- dgamma(xx,shape=2,rate=2/(1/theta[["incubation"]]))
yy_report <- dexp(xx,rate=theta[["report"]])
par(mfrow=c(1,3),mar=c(3,3,1,1),mgp=c(2,0.7,0)) #mfrow=c(4,2),
plot(xx,yy_incubation,xlab="incubation period",ylab="probability density",type="l",yaxs="i",lwd=2)
title(LETTERS[1],adj=0)
plot(xx,yy_recover,xlab="infectious period",ylab="probability density",type="l",yaxs="i",lwd=2)
title(LETTERS[2],adj=0)
plot(xx,yy_report,xlab="delay onset-to-confirmation",ylab="probability density",type="l",yaxs="i",lwd=2)
title(LETTERS[3],adj=0)
dev.copy(pdf,paste("plots/Figure_S1.pdf",sep=""),width=8,height=3)
dev.off()
}
# Calculate new oubtreak probability --------------------------------------
numerical_solver <- function(r0, k){
fun <- function (s) {(1 + (r0/k)*(1 - s))^(-k) - s}
solutions <- rootSolve::multiroot(fun, c(0, 1))$root
realistic_sol <- min(solutions)
return(realistic_sol)
}
g_rt <- ggplot(data = rt_df)+
geom_polygon(aes(x = Dates,y = ci50),fill = "#004DFF59")+
geom_polygon(aes(x = Dates,y = ci95),fill = "#004DFF33")+
geom_line(aes(x = Dates,y=ci0),col = "blue")+
scale_x_date(date_breaks = "1 week", date_labels = "%d")+
labs(x="Dates",y=expression(paste(R[t])))
tiff(paste("outputs/r_t/r_t_",id,".tiff",sep=""),units = 'px',
width=2000,height=2000,res=300)
print(g_rt)
dev.off()
g_rt <- ggplot(data = rt_df)+
geom_polygon(aes(x = Dates,y = ci50),fill = "#004DFF59")+
geom_polygon(aes(x = Dates,y = ci95),fill = "#004DFF33")+
geom_line(aes(x = Dates,y=ci0),col = "blue")+
scale_x_date(date_breaks = "2 week", date_labels = "%b")+
labs(x="Dates",y=expression(paste(R[t])))
tiff(paste("outputs/r_t/r_t_",id,".tiff",sep=""),units = 'px',
width=2000,height=2000,res=300)
print(g_rt)
dev.off()
g_rt <- ggplot(data = rt_df)+
geom_polygon(aes(x = Dates,y = ci50),fill = "#004DFF59")+
geom_polygon(aes(x = Dates,y = ci95),fill = "#004DFF33")+
geom_line(aes(x = Dates,y=ci0),col = "blue")+
scale_x_date(date_breaks = "2 week", date_labels = "%d %b")+
labs(x="Dates",y=expression(paste(R[t])))
tiff(paste("outputs/r_t/r_t_",id,".tiff",sep=""),units = 'px',
width=2000,height=2000,res=300)
print(g_rt)
dev.off()
View(bd_time2)
View(bd_time2)
View(bd_time)
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R', echo=TRUE)
library(plyr)
library(xlsx)
library(readxl)
library(dplyr)
library(tidyr)
library(xlsx)
library(doMC)
library(mgcv)
library(coda)
library(ggplot2)
registerDoMC(4)  #change the 2 to your number of CPU cores
rm(list=ls(all=TRUE))
source("model_functions.R")
source("load_data.R")
library(plyr)
library(xlsx)
library(readxl)
library(dplyr)
library(tidyr)
library(xlsx)
library(doMC)
library(mgcv)
library(coda)
library(ggplot2)
registerDoMC(4)  #change the 2 to your number of CPU cores
rm(list=ls(all=TRUE))
source("R/model_functions.R")
source("R/load_data.R")
View(bd_time)
bd_time
bd_time$District
bd_time[bd_time[,"District"]=="Satkhira"]
bd_time[bd_time[,"District"]=="Satkhira",]
sum(bd_time[bd_time[,"District"]=="Satkhira",])
sum(bd_time[bd_time[,"District"]=="Satkhira",-1])
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R', echo=TRUE)
population_data <- read.xlsx("data/BD_SIR_MODEL_UH04142020.xls",1,startRow = 2 )
bd_time1 <- as.data.frame(read_excel("data/BD_COVID_SIR_Samiha.xlsx",sheet  = "INFECTION"))
bd_time1 <- bd_time1[,1:35]
colNames <- colnames(bd_time1)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time1) <- c(colNames[1],dates)
bd_time2 <- read_excel("data/IEDCR REPORTING_04192020.xlsx" )
colNames <- colnames(bd_time2)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time2) <- c(colNames[1],dates)
bd_time <- join(bd_time1,bd_time2,by="District")
View(bd_time1)
View(bd_time)
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R', echo=TRUE)
population_data <- read.xlsx("data/BD_SIR_MODEL_UH04142020.xls",1,startRow = 2 )
bd_time1 <- as.data.frame(read_excel("data/BD_COVID_SIR_Samiha.xlsx",sheet  = "INFECTION"))
bd_time1 <- bd_time1[,1:35]
colNames <- colnames(bd_time1)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time1) <- c(colNames[1],dates)
bd_time2 <- read_excel("data/IEDCR REPORTING_04192020.xlsx" )
colNames <- colnames(bd_time2)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time2) <- c(colNames[1],dates)
bd_time <- join(bd_time1,bd_time2,by="District")
bd_time2 <- read_excel("data/IEDCR REPORTING of DAILY cases per District06022020.xlsx")
bd_time2 <- as.data.frame(bd_time2)
bd_time2 <- bd_time2[,-1]
colNames <- colnames(bd_time2)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time2) <- c(colNames[1],dates)
l <- ncol(bd_time)
bd_time <- bd_time[,-c( (l-5):l )]
bd_time <- merge(bd_time,bd_time2,by='District',all = T)
bd_time[is.na(bd_time)] <- 0
bd_time
population_data
bd_time[(bd_time=="Missing")] <- 0
bd_time[which(bd_time$District == "TOTAL"),-(1:35)] <- apply(bd_time[which(bd_time$District != "TOTAL"),-(1:35)],2,sum)
bd_time
print(bd_time)
print(bd_time[1:10,])
bd_time$District
print(bd_time[bd_time$District=="TOTAL",])
str(bd_time)
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R', echo=TRUE)
str(bd_time)
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R', echo=TRUE)
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
bd_time$District
population_data <- read.xlsx("data/BD_SIR_MODEL_UH04142020.xls",1,startRow = 2 )
bd_time1 <- as.data.frame(read_excel("data/BD_COVID_SIR_Samiha.xlsx",sheet  = "INFECTION"))
bd_time1 <- bd_time1[,1:35]
colNames <- colnames(bd_time1)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time1) <- c(colNames[1],dates)
bd_time2 <- read_excel("data/IEDCR REPORTING_04192020.xlsx" )
colNames <- colnames(bd_time2)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time2) <- c(colNames[1],dates)
bd_time <- join(bd_time1,bd_time2,by="District")
bd_time$District
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
bd_time$District
population_data <- read.xlsx("data/BD_SIR_MODEL_UH04142020.xls",1,startRow = 2 )
bd_time1 <- as.data.frame(read_excel("data/BD_COVID_SIR_Samiha.xlsx",sheet  = "INFECTION"))
bd_time1 <- bd_time1[,1:35]
colNames <- colnames(bd_time1)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time1) <- c(colNames[1],dates)
bd_time2 <- read_excel("data/IEDCR REPORTING_04192020.xlsx" )
colNames <- colnames(bd_time2)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time2) <- c(colNames[1],dates)
bd_time <- join(bd_time1,bd_time2,by="District")
bd_time$District
bd_time2 <- read_excel("data/IEDCR REPORTING of DAILY cases per District06022020.xlsx")
match(bd_time$District,bd_time2$District)
match(bd_time$District,bd_time2$District) == NA
is.na(match(bd_time$District,bd_time2$District)))
match(bd_time$District,bd_time2$District)
match(bd_time$District,bd_time2$District)[8]
is.na(match(bd_time$District,bd_time2$District)))
is.na(match(bd_time$District,bd_time2$District))
bd_time$District(is.na(match(bd_time$District,bd_time2$District)))
bd_time$District[is.na(match(bd_time$District,bd_time2$District))]
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
bd_time$District
bd_time2[bd_time2$District == c("Dhaka City","Dhaka District","keranigonj"),-1]
bd_time2[which(bd_time2$District == c("Dhaka City","Dhaka District","keranigonj")),-1]
bd_time2[which(bd_time2$District %in% c("Dhaka City","Dhaka District","keranigonj")),-1]
bd_time2[which(bd_time2$District %in% c("Dhaka City","Dhaka District","keranigonj"))]
bd_time2[which(bd_time2$District %in% c("Dhaka City","Dhaka District","keranigonj")),]
bd_time2[which(bd_time2$District %in% c("Dhaka City","Dhaka District","keranigonj")),]
bd_time2$District %in% c("Dhaka City","Dhaka District","keranigonj")
bd_time2$District %in% c("Dhaka City","Dhaka District","keraniganj")
bd_time2$District %in% c("Dhaka City","Dhaka district","keraniganj")
bd_time2[which(bd_time2$District %in% c("Dhaka City","Dhaka district","keraniganj")),]
bd_time2[which(bd_time2$District %in% c("Dhaka City","Dhaka district","keraniganj")),-1]
population_data <- read.xlsx("data/BD_SIR_MODEL_UH04142020.xls",1,startRow = 2 )
bd_time1 <- as.data.frame(read_excel("data/BD_COVID_SIR_Samiha.xlsx",sheet  = "INFECTION"))
bd_time1 <- bd_time1[,1:35]
colNames <- colnames(bd_time1)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time1) <- c(colNames[1],dates)
bd_time2 <- read_excel("data/IEDCR REPORTING_04192020.xlsx" )
colNames <- colnames(bd_time2)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time2) <- c(colNames[1],dates)
bd_time <- join(bd_time1,bd_time2,by="District")
bd_time2 <- read_excel("data/IEDCR REPORTING of DAILY cases per District06022020.xlsx")
bd_time2 <- as.data.frame(bd_time2)
bd_time2 <- bd_time2[,-1]
colNames <- colnames(bd_time2)
dates <- as.vector(sapply(colNames[-1],as.numeric)) %>% lapply( as.Date,origin = "1899-12-30")
dates <- do.call("c",dates)
dates <- sapply(dates, format,"%Y-%m-%d")
colnames(bd_time2) <- c(colNames[1],dates)
bd_time2[(bd_time2=="Missing")] <- 0
bd_time2[,-1] <- apply(bd_time2[,-1], 2, as.numeric)
dhaka_time <- sum(bd_time2[which(bd_time2$District %in% c("Dhaka City","Dhaka district","keraniganj")),-1])
dhaka_time <- c("Dhaka",dhaka_time)
bd_time2 <- rbind(bd_time2,dhaka_time)
bd_time2 <- bd_time2[-which(bd_time2$District %in% c("Dhaka City","Dhaka district","keraniganj")),]
bd_time2$District
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
warnings()
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
str(bd_time)
str(bd_time2)
dhaka_time
dhaka_time <- sum(bd_time2[which(bd_time2$District %in% c("Dhaka City","Dhaka district","keraniganj")),-1])
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
bd_time
bd_time$District
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
bd_time$District
dhaka_time
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
dhaka_time
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
dhaka_time
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/load_data.R')
dhaka_time
bd_time$District
bd_time$District=="Rangamati"
bd_time[bd_time$District=="Rangamati",]
sum(bd_time[bd_time$District=="Rangamati",])
sum(bd_time[bd_time$District=="Rangamati",-1])
View(bd_time)
write.xlsx2(bd_time,"data/data_31May.xlsx",row.names = F)
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_cases.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_cases.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_cases.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
a <- rep(0,10)
a[5:9] <- 1
a
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
rec_type = "beta_seg_60_2"
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/segmented_forecast.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
plot_df_no[91:120,"Dates"]
g_case <- ggplot()+
# geom_polygon(aes(x=Dates,y= Cases),fill = "#c9e5ff")+
geom_point(data = plot_df_no,aes(x=Dates,y=Inc,color="Real"))
g_case <- g_case +
geom_rect(aes(xmin = plot_df_no[(90+1),"Dates"],xmax = plot_df_no[(90+30),"Dates"],
ymin = 0, ymax = Inf),col = "#edf8ff")
print(g_case)
match(plot_df_no[,"Dates"],as.Date("2020-05-25"))
find(plot_df_no[,"Dates"],as.Date("2020-05-25"))
which(plot_df_no[,"Dates"],as.Date("2020-05-25"))
which(plot_df_no[,"Dates"] == as.Date("2020-05-25"))
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
summary(g_case)
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/main_script.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_both.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/main_script.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/main_script.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/main_script.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/main_script.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_cases.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plot_cases.R')
z <- read.csv("outputs/csv/case/case_model_no_red_beta_365.csv")
z
z[which(z$cases == max(z$cases)),]
z <- read.csv("outputs/csv/case/case_model_10_red_beta_365.csv")
z[which(z$cases == max(z$cases)),]
z <- read.csv("outputs/csv/case/case_model_20_red_beta_365.csv")
z[which(z$cases == max(z$cases)),]
z <- read.csv("outputs/csv/case/case_model_10_inc_gamma_365.csv")
z[which(z$cases == max(z$cases)),]
z <- read.csv("outputs/csv/case/case_model_20_inc_gamma_365.csv")
z[which(z$cases == max(z$cases)),]
z <- read.csv("outputs/csv/case/case_model_10_red_10_inc_both.csv")
z[which(z$cases == max(z$cases)),]
z <- read.csv("outputs/csv/case/case_model_20_red_10_inc_both.csv")
z[which(z$cases == max(z$cases)),]
z <- read.csv("outputs/csv/r_t/r_t_test.csv")
z
z[which(z$rt == max(z$rt)),]
z[22:35,]
z[22:33,]
z[22:33,rt]
z[22:33,"rt"]
mean(z[22:33,"rt"])
mean(z[34:68,"rt"])
(z[34:68,"rt"])
(z[34:68,])
(z[34:65,])
mean(z[34:65,"rt"])
mean(z[66:79,"rt"])
mean(z[66:78,"rt"])
library(plyr)
library(xlsx)
library(readxl)
library(dplyr)
library(tidyr)
library(xlsx)
library(doMC)
library(mgcv)
library(coda)
library(ggplot2)
registerDoMC(4)  #change the 2 to your number of CPU cores
rm(list=ls(all=TRUE))
source("R/model_functions.R")
source("R/load_data.R")
forecast_window <- 365
smc_recovery <- (1/14.04)
theta <- c(
r0 = 2.5,
population = total_population,
init_cases = data$cases[1],
betavol=.11,
recover = smc_recovery #smc recovery rate
# recover = (1/11.59) #ls recovery rate
)
theta_initNames <- c(names(theta),"sus","inf","rem","beta","cases")
theta[["beta"]] <- theta[["r0"]] * theta[['recover']]
data$case_data_conf <- data$cases
data$case_data_recovered <- data$cases
data$case_data_death <- data$cases
death_rate <- 0.031 * 0.196 * 0.593
death_rate
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/death_plot_both.R')
ids = c("no_red","10_red","20_red","30_red")
ids2 = c("no_inc","10_inc","20_inc","30_inc")
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/death_plot_both.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/death_plot_both.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/death_plot_cases.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/death_plot_cases.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/death_plot_segment.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/death_plot_segment.R')
365*2
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/main_script.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/plot_both.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/main_script.R')
source('/media/khan/Codes/Ebooks&Lectures/Level-4_Term-2/Thesis/Corona/bd_prediction/bd_prediction/R/plotters/plot_both.R')
z <- read.csv('outputs/csv/case/case_model_no_red_beta_365.csv')
z
z[365+79,]
z[(365+79),]
z[(365+78),]
sum(z$cases)
N
cumsum(z$cases)[443]
cumsum(z$cases)[443]/N
z <- read.csv('outputs/csv/case/case_model_no_red_beta_365_seg_60.csv')
plot(z)
plot(z$cases)
z$cases
z
z <- read.csv('outputs/csv/case/case_model_no_red_beta_365_seg_60_2.csv')
z <- read.csv('outputs/csv/case/case_model_no_red_beta_seg_60_2.csv')
z$cases
plot(z$cases)
z
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z
z <- read.csv('outputs/csv/case/case_model_10_red_beta_seg_60_2.csv')
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z
z <- read.csv('outputs/csv/case/case_model_20_red_beta_seg_60_2.csv')
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z
z <- read.csv('outputs/csv/case/case_model_30_red_beta_seg_60_2.csv')
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z <- read.csv('outputs/csv/case/case_model_30_red_beta_seg_60_2.csv')
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z
z[250:300]
z[250:300,]
z <- read.csv('outputs/csv/case/case_model_30_red_beta_seg_90_2.csv')
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z
z[250:320,]
z <- read.csv('outputs/csv/case/case_model_20_red_beta_seg_90_2.csv')
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z
z[250:320,]
z <- read.csv('outputs/csv/case/case_model_10_red_beta_seg_90_2.csv')
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z
z <- read.csv('outputs/csv/case/case_model_no_red_beta_seg_90_2.csv')
z$trend <- (z$cases - c(0,head(z$cases,-1)))
z
